#!/bin/sh

# live-snapshot - utility to manage Debian Live systems snapshots
#
#   This program mounts a device (fallback to /tmpfs under $MOUNTP
#   and saves the /live/cow (or a different dir) filesystem in it for reuse
#   in another live-initramfs session. Look at manpage for more info.
#
# Copyright (C) 2006 Marco Amadori <marco.amadori@gmail.com>
# Copyright (C) 2008 Chris Lamb <chris@chris-lamb.co.uk>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# On Debian systems, the complete text of the GNU General Public License
# can be found in /usr/share/common-licenses/GPL-2 file.

set -eu

. /usr/share/initramfs-tools/scripts/live-helpers
. /etc/live.conf

export USERNAME USERFULLNAME HOSTNAME

PROGRAM="$(basename $0)"

# Needs to be available at run and reboot time
SAFE_TMPDIR="/live"

# Permits multiple runs
MOUNTP="$(mktemp -d -p ${SAFE_TMPDIR} live-snapshot-mnt.XXXXXX)"
SNAP_COW="/live/cow"
SNAP_DEV=""
DEST="${MOUNTP}/live-sn.cpio.gz"
SNAP_TYPE="cpio"
DESKTOP_LINK="/home/${USERNAME}/Desktop/live-snapshot"
SNAP_RESYNC_STRING=""

Error ()
{
	echo "${PROGRAM}: error:" ${@}
	exit 1
}

panic ()
{
	Error ${@}
}

Header ()
{
	echo "${PROGRAM} - utility to perform snapshots of Debian Live systems"
	echo
	echo "usage: ${PROGRAM} [-c|--cow DIRECTORY] [-d|--device DEVICE] [-o|--output FILE] [-t|--type TYPE]"
	echo "       ${PROGRAM} [-r|--resync-string STRING]"
	echo "       ${PROGRAM} [-h|--help]"
	echo "       ${PROGRAM} [-u|--usage]"
	echo "       ${PROGRAM} [-v|--version]"
}

Help ()
{
	Header

	echo
	echo "Options:"
	echo "  -c, --cow: copy on write directory (default: ${SNAP_COW})."
	echo "  -d, --device: output snapshot device (default: ${SNAP_DEV:-auto})."
	echo "  -o, --output: output image file (default: ${DEST})."
	echo "  -r, --resync-string: internally used to resync previous made snapshots."
	echo "  -t, --type: snapshot filesystem type. Options: \"squashfs\", \"ext2\", \"ext3\", \"jffs2\" or \"cpio\".gz archive (default: ${SNAP_TYPE})"
	echo
	echo "Look at live-snapshot(1) man page for more information."

	exit 0
}

Usage ()
{
	Header

	echo
	echo "Try \"${PROGRAM} --help\" for more information."

	exit 0
}

Version ()
{
	echo "${PROGRAM}"
	echo
	echo "Copyright (C) 2006 Marco Amadori <marco.amadori@gmail.com>"
	echo
	echo "This program is free software; you can redistribute it and/or modify"
	echo "it under the terms of the GNU General Public License as published by"
	echo "the Free Software Foundation; either version 2 of the License, or"
	echo "(at your option) any later version."
	echo
	echo "This program is distributed in the hope that it will be useful,"
	echo "but WITHOUT ANY WARRANTY; without even the implied warranty of"
	echo "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"
	echo "GNU General Public License for more details."
	echo
	echo "You should have received a copy of the GNU General Public License"
	echo "along with this program; if not, write to the Free Software"
	echo "Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA"
	echo
	echo "On Debian systems, the complete text of the GNU General Public License"
	echo "can be found in /usr/share/common-licenses/GPL-2 file."
	echo
	echo "Homepage: <http://debian-live.alioth.debian.org/>"

	exit 0
}

Is_same_mount ()
{
	dir1="$(Base_path ${1})"
	dir2="$(Base_path ${2})"

	if [ "${dir1}" = "${dir2}" ]
	then
		return 0
	else
		return 1
	fi
}

Parse_args ()
{
	# Parse command line
	ARGS="${*}"
	ARGUMENTS="$(getopt --longoptions cow:,device:,output,resync-string:,type:,help,usage,version --name=${PROGRAM} --options c:d:o:t:r:,h,u,v --shell sh -- ${ARGS})"

	eval set -- "${ARGUMENTS}"

	while true
	do
		case "${1}" in
			-c|--cow)
				SNAP_COW="${2}"
				shift 2
				;;

			-d|--device)
				SNAP_DEV="${2}"
				shift 2
				;;

			-o|--output)
				SNAP_OUTPUT="${2}"
				shift 2
				;;

			-t|--type)
				SNAP_TYPE="${2}"
				shift 2
				;;

			-r|--resync-string)
				SNAP_RESYNC_STRING="${2}"
				break
				;;

			-h|--help)
				Help
				;;

			-u|--usage)
				Usage
				;;

			-v|--version)
				Version
				;;

			--)
				shift
				break
				;;

			*)
				Error "internal error."
				;;

		esac
	done
}

Defaults ()
{
	# Parse resync string
	if [ -n "${SNAP_RESYNC_STRING}" ]
	then
		SNAP_COW=$(echo "${SNAP_RESYNC_STRING}" | cut -f1 -d ':')
		SNAP_DEV=$(echo "${SNAP_RESYNC_STRING}" | cut -f2 -d ':')
		DEST=$(echo "${SNAP_RESYNC_STRING}" | cut -f3 -d ':')

		case "${DEST}" in
			*.cpio.gz)
				SNAP_TYPE="cpio"
				;;

			*.squashfs)
				SNAP_TYPE="squashfs"
				;;

			*.jffs2)
				SNAP_TYPE="jffs2"
				;;

			""|*.ext2|*.ext3)
				SNAP_TYPE="ext2"
				;;
			*)
				Error "unrecognized resync string"
				;;
		esac
	else
		# Set target file based on image
		case "${SNAP_TYPE}" in
			cpio)
				DEST="${MOUNTP}/live-sn.cpio.gz"
				;;

			squashfs|jffs2|ext2)
				DEST="${MOUNTP}/live-sn.${SNAP_TYPE}"
				;;

			ext3)
				DEST="${MOUNTP}/live-sn.ext2"
				;;
		esac
	fi
}

Validate_input ()
{
	case "${SNAP_TYPE}" in
		cpio|squashfs|jffs2|ext2|ext3)
			;;

		*)
			Error "invalid filesystem type \"${SNAP_TYPE}\""
			;;
	esac

	if [ ! -d "${SNAP_COW}" ]
	then
		Error "${SNAP_COW} is not a directory"
	fi

	if [ "$(id -u)" -ne 0 ]
	then
		Error "you are not root"
	fi
}

Mount_device ()
{
	mkdir -p "${MOUNTP}"

	case "${SNAP_DEV}" in
		"")
			# create a temp
			mount -t tmpfs -o rw tmpfs "${MOUNTP}"
			;;

		*)
			if [ -b "${SNAP_DEV}" ]
			then
				try_mount "${SNAP_DEV}" "${MOUNTP}" rw
			fi
			;;
	esac
}

Do_snapshot ()
{
	case "${SNAP_TYPE}" in
		squashfs)
			EXCLUDE_LIST="$(mktemp -p ${SAFE_TMPDIR} live-snapshot-exclude-list.XXXXXX)"
			echo "./${EXCLUDE_LIST}" > "${EXCLUDE_LIST}"
			cd "${SNAP_COW}"
			find . -name '*.wh.*' >> "${EXCLUDE_LIST}"
			cd "${OLDPWD}"
			mksquashfs "${SNAP_COW}" "${DEST}" -ef "${EXCLUDE_LIST}"
			rm -f "${EXCLUDE_LIST}"
			;;

		cpio)
			( cd "${SNAP_COW}" && find . -path '*.wh.*' -prune -o -print0 | cpio --quiet -o0 -H newc | gzip -9c > "${DEST}" ) || exit 1
			;;

		ext2|ext3)
			DU_DIM="$(du -ks ${SNAP_COW} | cut -f1)"
			REAL_DIM="$(expr ${DU_DIM} + ${DU_DIM} / 20)" # Just 5% more to be sure, need something more sophistcated here...
			genext2fs --size-in-blocks=${REAL_DIM} --reserved-percentage=0 --root="${SNAP_COW}" "${DEST}"
			;;

		jffs2)
			mkfs.jffs2 --root="${SNAP_COW}" --output="${DEST}"
			;;
	esac
}

Clean ()
{
	if echo "${DEST}" | grep -q "${MOUNTP}"
	then
		echo "${DEST} is present on ${MOUNTP}, therefore no automatic unmounting the latter." > /dev/null 1>&2
	else
		umount "${MOUNTP}"
		rmdir "${MOUNTP}"
	fi
}

Main ()
{
	Parse_args "${@}"
	Defaults
	Validate_input
	trap 'Clean' EXIT
	Mount_device
	Do_snapshot
}

Main "${@:-}"
